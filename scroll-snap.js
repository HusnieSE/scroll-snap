!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports["scroll-snap"]=F():Q["scroll-snap"]=F()}(window,(function(){return function(Q){var F={};function U(B){if(F[B])return F[B].exports;var n=F[B]={i:B,l:!1,exports:{}};return Q[B].call(n.exports,n,n.exports,U),n.l=!0,n.exports}return U.m=Q,U.c=F,U.d=function(Q,F,B){U.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},U.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},U.t=function(Q,F){if(1&F&&(Q=U(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(U.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var n in Q)U.d(B,n,function(F){return Q[F]}.bind(null,n));return B},U.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(F,"a",F),F},U.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},U.p="",U(U.s=0)}([function(module,exports,__webpack_require__){"use strict";eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = __importDefault(__webpack_require__(1));\nfunction callback() {\n    console.log('snap');\n}\nvar baseConfig = {\n    timeout: 100,\n    duration: 300,\n    threshold: 0.2,\n    easing: function (t) { return (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t); },\n};\nvar containerVertical = document.getElementById('container');\nvar snapVertical = new index_1.default(containerVertical, __assign({ snapDestinationY: '90%' }, baseConfig)).bind(callback);\nvar containerHorizontal = document.getElementById('container-horizontal');\nvar snapHorizontal = new index_1.default(containerHorizontal, __assign({ snapDestinationX: '90%' }, baseConfig)).bind(callback);\nwindow.unbind = function () {\n    snapVertical.unbind();\n    snapHorizontal.unbind();\n};\nwindow.bind = function () {\n    snapVertical.bind(callback);\n    snapHorizontal.bind(callback);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY3JvbGwtc25hcC8uL2RlbW8vc3JjL2luZGV4LnRzP2I4ZGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNEQUF3QztBQUV4QyxTQUFTLFFBQVE7SUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUNyQixDQUFDO0FBRUQsSUFBTSxVQUFVLEdBQUc7SUFDakIsT0FBTyxFQUFFLEdBQUc7SUFDWixRQUFRLEVBQUUsR0FBRztJQUNiLFNBQVMsRUFBRSxHQUFHO0lBQ2QsTUFBTSxFQUFFLFVBQUMsQ0FBUyxJQUFLLFFBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBNUMsQ0FBNEM7Q0FDcEU7QUFFRCxJQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDO0FBQzlELElBQU0sWUFBWSxHQUFHLElBQUksZUFBVSxDQUFDLGlCQUFpQixhQUNuRCxnQkFBZ0IsRUFBRSxLQUFLLElBQ3BCLFVBQVUsRUFDYixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7QUFFakIsSUFBTSxtQkFBbUIsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDO0FBQzNFLElBQU0sY0FBYyxHQUFHLElBQUksZUFBVSxDQUFDLG1CQUFtQixhQUN2RCxnQkFBZ0IsRUFBRSxLQUFLLElBQ3BCLFVBQVUsRUFDYixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FFaEI7QUFBQyxNQUFjLENBQUMsTUFBTSxHQUFHO0lBQ3hCLFlBQVksQ0FBQyxNQUFNLEVBQUU7SUFDckIsY0FBYyxDQUFDLE1BQU0sRUFBRTtBQUN6QixDQUFDLENBQ0E7QUFBQyxNQUFjLENBQUMsSUFBSSxHQUFHO0lBQ3RCLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzNCLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQy9CLENBQUMiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTY3JvbGxTbmFwIGZyb20gJy4uLy4uL3NyYy9pbmRleCdcblxuZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gIGNvbnNvbGUubG9nKCdzbmFwJylcbn1cblxuY29uc3QgYmFzZUNvbmZpZyA9IHtcbiAgdGltZW91dDogMTAwLFxuICBkdXJhdGlvbjogMzAwLFxuICB0aHJlc2hvbGQ6IDAuMixcbiAgZWFzaW5nOiAodDogbnVtYmVyKSA9PiAodCA8IDAuNSA/IDIgKiB0ICogdCA6IC0xICsgKDQgLSAyICogdCkgKiB0KSxcbn1cblxuY29uc3QgY29udGFpbmVyVmVydGljYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJylcbmNvbnN0IHNuYXBWZXJ0aWNhbCA9IG5ldyBTY3JvbGxTbmFwKGNvbnRhaW5lclZlcnRpY2FsLCB7XG4gIHNuYXBEZXN0aW5hdGlvblk6ICc5MCUnLFxuICAuLi5iYXNlQ29uZmlnLFxufSkuYmluZChjYWxsYmFjaylcblxuY29uc3QgY29udGFpbmVySG9yaXpvbnRhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250YWluZXItaG9yaXpvbnRhbCcpXG5jb25zdCBzbmFwSG9yaXpvbnRhbCA9IG5ldyBTY3JvbGxTbmFwKGNvbnRhaW5lckhvcml6b250YWwsIHtcbiAgc25hcERlc3RpbmF0aW9uWDogJzkwJScsXG4gIC4uLmJhc2VDb25maWcsXG59KS5iaW5kKGNhbGxiYWNrKVxuXG47KHdpbmRvdyBhcyBhbnkpLnVuYmluZCA9ICgpID0+IHtcbiAgc25hcFZlcnRpY2FsLnVuYmluZCgpXG4gIHNuYXBIb3Jpem9udGFsLnVuYmluZCgpXG59XG47KHdpbmRvdyBhcyBhbnkpLmJpbmQgPSAoKSA9PiB7XG4gIHNuYXBWZXJ0aWNhbC5iaW5kKGNhbGxiYWNrKVxuICBzbmFwSG9yaXpvbnRhbC5iaW5kKGNhbGxiYWNrKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction easeInOutQuad(t) {\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n}\nvar TIMEOUT_MIN = 50;\nvar TIMEOUT_DEFAULT = 100;\nvar DURATION_DEFAULT = 300;\nvar THRESHOLD_DEFAULT = 0.2;\nvar EASING_DEFAULT = easeInOutQuad;\nvar NOOP = function () { };\nvar ScrollSnap = /** @class */ (function () {\n    function ScrollSnap(element, config) {\n        var _this = this;\n        this.animating = false;\n        this.lastScrollValue = {\n            x: 0,\n            y: 0,\n        };\n        this.startAnimation = function () {\n            _this.speedDeltaX = _this.checkScrollSpeed(_this.target.scrollLeft, 'x');\n            _this.speedDeltaY = _this.checkScrollSpeed(_this.target.scrollTop, 'y');\n            if (_this.animating || (_this.speedDeltaX === 0 && _this.speedDeltaY === 0)) {\n                return;\n            }\n            _this.handler(_this.target);\n        };\n        this.animationHandler = function () {\n            // if we don't move a thing, we can ignore the timeout: if we did, there'd be another timeout added for this.scrollStart+1.\n            if (_this.scrollStart.y === _this.target.scrollTop &&\n                _this.scrollStart.x === _this.target.scrollLeft) {\n                // ignore timeout\n                return;\n            }\n            // detect direction of scroll. negative is up, positive is down.\n            var direction = {\n                y: _this.speedDeltaY > 0 ? 1 : -1,\n                x: _this.speedDeltaX > 0 ? 1 : -1,\n            };\n            // get the next snap-point to snap-to\n            var snapPoint = _this.getNextSnapPoint(_this.target, direction);\n            _this.listenerElement.removeEventListener('scroll', _this.startAnimation, false);\n            _this.animating = true;\n            // smoothly move to the snap point\n            _this.smoothScroll(_this.target, snapPoint, function () {\n                // after moving to the snap point, rebind the scroll event handler\n                _this.animating = false;\n                _this.listenerElement.addEventListener('scroll', _this.startAnimation, false);\n                _this.onAnimationEnd();\n            });\n            // we just jumped to the snapPoint, so this will be our next this.scrollStart\n            if (!isNaN(snapPoint.x) || !isNaN(snapPoint.y)) {\n                _this.scrollStart = snapPoint;\n            }\n        };\n        this.element = element;\n        var timeout = config.timeout, duration = config.duration, easing = config.easing, snapDestinationX = config.snapDestinationX, snapDestinationY = config.snapDestinationY, threshold = config.threshold;\n        if (timeout && (isNaN(timeout) || typeof timeout === 'boolean')) {\n            throw new Error(\"Optional config property 'timeout' is not valid, expected NUMBER but found \" + (typeof timeout).toUpperCase());\n        }\n        // any value less then TIMEOUT_MIN may cause weird bahaviour on some devices (especially on mobile with momentum scrolling)\n        this.timeout = timeout && timeout >= TIMEOUT_MIN ? timeout : TIMEOUT_DEFAULT;\n        if (duration && (isNaN(duration) || typeof duration === 'boolean')) {\n            throw new Error(\"Optional config property 'duration' is not valid, expected NUMBER but found \" + (typeof duration).toUpperCase());\n        }\n        this.duration = duration || DURATION_DEFAULT;\n        if (easing && typeof easing !== 'function') {\n            throw new Error(\"Optional config property 'easing' is not valid, expected FUNCTION but found \" + (typeof easing).toUpperCase());\n        }\n        this.easing = easing || EASING_DEFAULT;\n        if (snapDestinationX && typeof snapDestinationX !== 'string') {\n            throw new Error(\"Optional config property 'snapDestinationX' is not valid, expected STRING but found \" + (typeof easing).toUpperCase());\n        }\n        this.snapDestinationX = snapDestinationX;\n        if (snapDestinationY && typeof snapDestinationY !== 'string') {\n            throw new Error(\"Optional config property 'snapDestinationY' is not valid, expected STRING but found \" + (typeof easing).toUpperCase());\n        }\n        this.snapDestinationY = snapDestinationY;\n        if (threshold && (isNaN(threshold) || typeof threshold === 'boolean')) {\n            throw new Error(\"Optional config property 'threshold' is not valid, expected NUMBER but found \" + (typeof threshold).toUpperCase());\n        }\n        this.threshold = threshold || THRESHOLD_DEFAULT;\n    }\n    ScrollSnap.prototype.checkScrollSpeed = function (value, axis) {\n        var _this = this;\n        var clear = function () {\n            _this.lastScrollValue[axis] = null;\n        };\n        var newValue = value;\n        var delta;\n        if (this.lastScrollValue[axis] !== null) {\n            delta = newValue - this.lastScrollValue[axis];\n        }\n        else {\n            delta = 0;\n        }\n        this.lastScrollValue[axis] = newValue;\n        this.scrollSpeedTimer && clearTimeout(this.scrollSpeedTimer);\n        this.scrollSpeedTimer = window.setTimeout(clear, 100);\n        return delta;\n    };\n    ScrollSnap.prototype.saveDeclaration = function (obj) {\n        this.snapLengthUnit = this.parseSnapCoordValue(this.snapDestinationX, this.snapDestinationY);\n    };\n    ScrollSnap.prototype.bindElement = function (element) {\n        this.target = element;\n        this.listenerElement = element === document.documentElement ? window : element;\n        this.listenerElement.addEventListener('scroll', this.startAnimation, false);\n        this.saveDeclaration(this.target);\n    };\n    ScrollSnap.prototype.unbindElement = function () {\n        this.listenerElement.removeEventListener('scroll', this.startAnimation, false);\n    };\n    /**\n     * scroll handler\n     * this is the callback for scroll events.\n     */\n    ScrollSnap.prototype.handler = function (target) {\n        // if currently animating, stop it. this prevents flickering.\n        if (this.animationFrame) {\n            clearTimeout(this.animationFrame);\n        }\n        // if a previous timeout exists, clear it.\n        if (this.scrollHandlerTimer) {\n            // we only want to call a timeout once after scrolling..\n            clearTimeout(this.scrollHandlerTimer);\n        }\n        else {\n            this.scrollStart = {\n                y: target.scrollTop,\n                x: target.scrollLeft,\n            };\n        }\n        this.scrollHandlerTimer = window.setTimeout(this.animationHandler, this.timeout);\n    };\n    ScrollSnap.prototype.getNextSnapPoint = function (target, direction) {\n        // get snap length\n        var snapLength = {\n            y: Math.round(this.getYSnapLength(this.target, this.snapLengthUnit.y)),\n            x: Math.round(this.getXSnapLength(this.target, this.snapLengthUnit.x)),\n        };\n        var top = this.target.scrollTop;\n        var left = this.target.scrollLeft;\n        // calc current and initial snappoint\n        var currentPoint = {\n            y: top / snapLength.y || 1,\n            x: left / snapLength.x || 1,\n        };\n        var nextPoint = {\n            y: 0,\n            x: 0,\n        };\n        /**\n         * Set target and bounds by direction,\n         * if threshold has not been reached, scroll back to currentPoint\n         **/\n        if (this.isAboveThreshold(direction.y, currentPoint.y)) {\n            nextPoint.y = this.roundByDirection(direction.y, currentPoint.y);\n        }\n        else {\n            nextPoint.y = this.roundByDirection(direction.y * -1, currentPoint.y);\n        }\n        if (this.isAboveThreshold(direction.x, currentPoint.x)) {\n            nextPoint.x = this.roundByDirection(direction.x, currentPoint.x);\n        }\n        else {\n            nextPoint.x = this.roundByDirection(direction.x * -1, currentPoint.x);\n        }\n        // calculate where to scroll\n        var scrollTo = {\n            y: nextPoint.y * snapLength.y,\n            x: nextPoint.x * snapLength.x,\n        };\n        // stay in bounds (minimum: 0, maxmimum: absolute height)\n        scrollTo.y = this.stayInBounds(0, target.scrollHeight, scrollTo.y);\n        scrollTo.x = this.stayInBounds(0, target.scrollWidth, scrollTo.x);\n        return scrollTo;\n    };\n    ScrollSnap.prototype.isAboveThreshold = function (direction, currentPoint) {\n        return direction > 0\n            ? currentPoint % 1 > this.threshold\n            : 1 - (currentPoint % 1) > this.threshold;\n    };\n    ScrollSnap.prototype.roundByDirection = function (direction, currentPoint) {\n        if (direction === -1) {\n            // when we go up, we floor the number to jump to the next snap-point in scroll direction\n            return Math.floor(currentPoint);\n        }\n        // go down, we ceil the number to jump to the next in view.\n        return Math.ceil(currentPoint);\n    };\n    ScrollSnap.prototype.stayInBounds = function (min, max, destined) {\n        return Math.max(Math.min(destined, max), min);\n    };\n    ScrollSnap.prototype.parseSnapCoordValue = function (x, y) {\n        // regex to parse lengths\n        var regex = /(\\d+)(px|%|vw|vh)/;\n        // defaults\n        var parsed = {\n            y: {\n                value: 0,\n                unit: 'px',\n            },\n            x: {\n                value: 0,\n                unit: 'px',\n            },\n        };\n        // parse value and unit\n        var resultX = regex.exec(x);\n        var resultY = regex.exec(y);\n        // if regexp fails, value is null\n        if (resultX !== null) {\n            parsed.x = {\n                value: Number(resultX[1]),\n                unit: resultX[2],\n            };\n        }\n        if (resultY !== null) {\n            parsed.y = {\n                value: Number(resultY[1]),\n                unit: resultY[2],\n            };\n        }\n        return parsed;\n    };\n    ScrollSnap.prototype.getYSnapLength = function (obj, declaration) {\n        if (declaration.unit === 'vh') {\n            // when using vh, one snap is the length of vh / 100 * value\n            return ((Math.max(document.documentElement.clientHeight, window.innerHeight || 1) / 100) *\n                declaration.value);\n        }\n        else if (declaration.unit === '%') {\n            // when using %, one snap is the length of element height / 100 * value\n            return (obj.clientHeight / 100) * declaration.value;\n        }\n        else {\n            // when using px, one snap is the length of element height / value\n            return obj.clientHeight / declaration.value;\n        }\n    };\n    ScrollSnap.prototype.getXSnapLength = function (obj, declaration) {\n        if (declaration.unit === 'vw') {\n            // when using vw, one snap is the length of vw / 100 * value\n            return ((Math.max(document.documentElement.clientWidth, window.innerWidth || 1) / 100) *\n                declaration.value);\n        }\n        else if (declaration.unit === '%') {\n            // when using %, one snap is the length of element width / 100 * value\n            return (obj.clientWidth / 100) * declaration.value;\n        }\n        else {\n            // when using px, one snap is the length of element width / value\n            return obj.clientWidth / declaration.value;\n        }\n    };\n    ScrollSnap.prototype.isEdge = function (coords) {\n        return (coords.x === 0 && this.speedDeltaY === 0) || (coords.y === 0 && this.speedDeltaX === 0);\n    };\n    ScrollSnap.prototype.smoothScroll = function (obj, end, callback) {\n        var _this = this;\n        var position = function (start, end, elapsed, duration) {\n            if (elapsed > duration) {\n                return end;\n            }\n            return start + (end - start) * _this.easing(elapsed / duration);\n        };\n        var start = {\n            y: obj.scrollTop,\n            x: obj.scrollLeft,\n        };\n        // get animation frame or a fallback\n        var requestAnimationFrame = window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            function (fn) {\n                return window.setTimeout(fn, 15);\n            };\n        var duration = this.isEdge(start) ? 0 : this.duration;\n        var startTime;\n        // setup the stepping function\n        function step(timestamp) {\n            if (!startTime) {\n                startTime = timestamp;\n            }\n            var elapsed = timestamp - startTime;\n            // change position on y-axis if result is a number.\n            if (!isNaN(end.y)) {\n                obj.scrollTop = position(start.y, end.y, elapsed, duration);\n            }\n            // change position on x-axis if result is a number.\n            if (!isNaN(end.x)) {\n                obj.scrollLeft = position(start.x, end.x, elapsed, duration);\n            }\n            // check if we are over due;\n            if (elapsed < duration) {\n                requestAnimationFrame(step);\n            }\n            else {\n                // is there a callback?\n                if (typeof callback === 'function') {\n                    // stop execution and run the callback\n                    return callback(end);\n                }\n            }\n        }\n        this.animationFrame = requestAnimationFrame(step);\n    };\n    ScrollSnap.prototype.bind = function (callback) {\n        this.onAnimationEnd = typeof callback === 'function' ? callback : NOOP;\n        this.bindElement(this.element);\n        return this;\n    };\n    ScrollSnap.prototype.unbind = function () {\n        this.unbindElement();\n        return this;\n    };\n    return ScrollSnap;\n}());\nexports.default = ScrollSnap;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")}])}));